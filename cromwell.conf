include required(classpath("application"))
google {
  application-name = "cromwell"
  auths = [
    {
      name = "application_default"
      scheme = "application_default"
    }
  ]
}
engine {
  filesystems {
    gcs {
      auth = "application_default"
      project = "pb-dev-312200"
    }
  }
}
backend {
  default = PAPIv2

  providers {
    PAPIv2 {
      actor-factory = "cromwell.backend.google.pipelines.v2beta.PipelinesApiLifecycleActorFactory"
      config {
        # Google project
        project = "pb-dev-312200"

        # Base bucket for workflow executions
        root = "gs://pb-dev-312200.appspot.com/workflow-tests/wdl-workflows/executions"

        # Make the name of the backend used for call caching purposes insensitive to the
        # PAPI version.
        name-for-call-caching-purposes: PAPI

        # Emit a warning if jobs last longer than this amount of time. This might indicate that
        # something got stuck in PAPI.
        slow-job-warning-time: 24 hours

        # Number of workers to assign to PAPI requests
        request-workers = 3

        genomics {
          # A reference to an auth defined in the `google` stanza at the top. This auth is used
          # to create pipelines and manipulate auth JSONs.
          auth = "application_default"

          # Endpoint for APIs, no reason to change this unless directed by Google.
          endpoint-url = "https://lifesciences.googleapis.com/"

          # Currently Cloud Life Sciences API is available only in the US, Europe and Asia regions.
          # This might change in the future, the most up-to-date list is available here:
          # https://cloud.google.com/life-sciences/docs/concepts/locations
          # Note that this is only used to store metadata about the pipeline operation.
          # Worker VMs can be scheduled in any region (see default-zones).
          location = "us-central1"
        }

        filesystems {
          gcs {
            auth = "application_default"
          }
        }

        default-runtime-attributes {
          cpu: 10
          failOnStderr: false
          continueOnReturnCode: 0
          memory: "2048 MB"
          bootDiskSizeGb: 10
          # Allowed to be a String, or a list of Strings
          disks: "local-disk 10 SSD"
          noAddress: false
          preemptible: 0

          # The zones to schedule worker VMs in. These should be colocated with
          # the regions of your data buckets.
          # https://cromwell.readthedocs.io/en/stable/RuntimeAttributes/#zones
          zones = "australia-southeast1-a australia-southeast1-b australia-southeast1-c"
        }

        reference-disk-localization-manifest-files = ["gs://gcp-public-data--broad-references/refdisk_manifest.json"]
      }
    }
    Local {
      # The actor that runs the backend. In this case, it's the Shared File System
      # (SFS) ConfigBackend.
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

      config {
        # If true submits scripts to the bash background using "&". Only usefull for
        # dispatchers that do NOT submitthe job and then immediately return a scheduled job id.
        run-in-background = true

        # File system configuration.
        filesystems {
          # For SFS backends, the "local" configuration specifies how files are handled.
          local {

            # Try to hard link (ln), then soft-link (ln -s), and if both fail, then copy
            # the files.
            localization: [
              "hard-link", "soft-link", "copy"
            ]
            # Call caching strategies
            caching {
              # When copying a cached result, what type of file duplication should occur.
              # Attempted in the order listed below:
              duplication-strategy: [
                "hard-link", "soft-link", "copy"
              ]

              # Possible values: file, path, path+modtime
              # "file" will compute an md5 hash of the file content.
              # "path" will compute an md5 hash of the file path. This strategy will only be
              #   effective if the duplication-strategy (above) is set to "soft-link",
              #   in order to allow for the original file path to be hashed.
              # "path+modtime" will compute an md5 hash of the file path and the last
              # modified time. The same conditions as for "path" apply here.
              # Default: file
              hashing-strategy: "file"

              # When true, will check if a sibling file with the same name and the .md5
              # extension exists, and if it does, use the content of this file as a hash.
              # If false or the md5 does not exist, will proceed with the above-defined
              # hashing strategy.
              check-sibling-md5: false
            }
          }
        }

        # The defaults for runtime attributes if not provided.
        default-runtime-attributes {
          failOnStderr: false
          continueOnReturnCode: 0
        }
      }
    }
  }
}
call-caching {
  enabled = true
  invalidate-bad-cache-results = false
}
# database {
#  profile = "slick.jdbc.MySQLProfile$"
#  db {
#    driver = "com.mysql.cj.jdbc.Driver"
#    url = "jdbc:mysql://localhost/cromwell?rewriteBatchedStatements=true&useLegacyDatetimeCode=false&serverTimezone=UTC"
#    user = "root"
#    password = ""
#    connectionTimeout = 5000
#  }
# }
database {
  profile = "slick.jdbc.MySQLProfile$"
  db {
    driver = "com.mysql.cj.jdbc.Driver"
    url = "jdbc:mysql://0.0.0.0:40005/cromwell?useSSL=false&rewriteBatchedStatements=true&useLegacyDatetimeCode=false&serverTimezone=Australia/Sydney"
    user = "cromwell_user"
    password = "12345678!1aA"
    connectionTimeout = 5000
  }
}
